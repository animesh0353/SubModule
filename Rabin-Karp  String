// class Solution to with solve method to solve the problem
public class Solution 
{
	 
	/* Following program is a C implementation of the Rabin Karp Algorithm 
	   given in the CLRS book */
	 
	private static int d  = 256 ;
	private static long prime = 1000000009;
	  
	/*  pat  -> pattern
	    txt  -> text
	    q    -> A prime number
	*/
	public static void search(char[] pat, char[] txt)
	{
	    int M = pat.length;
	    int N = txt.length;
	    int i, j;
	    long p = 0;  // hash value for pattern
	    long t = 0; // hash value for txt
	    long h = 1;
	  
	    // The value of h would be "pow(d, M-1)%q" for highest power on pat
	    for (i = 0; i < M-1; i++)
	        h = (h*d)%prime;
	  
	    // Calculate the hash value of pattern and first window of text
	    for (i = 0; i < M; i++)
	    {
	        p = (d*p + pat[i])%prime;
	        t = (d*t + txt[i])%prime;
	    }
	  
	    // Slide the pattern over text one by one 
	    for (i = 0; i <= N - M; i++)
	    {
	        
	        // Check the hash values of current window of text and pattern
	        // If the hash values match then only check for characters on by one
	        if ( p == t )
	        {
	            /* Check for characters one by one */
	            for (j = 0; j < M; j++)
	            {
	                if (txt[i+j] != pat[j])
	                    break;
	            }
	            if (j == M)  // if p == t and pat[0...M-1] = txt[i, i+1, ...i+M-1]
	            {
	                System.out.printf("Pattern found at index %d \n", i);
	            }
	        }
	         
	        // Calculate hash value for next window of text: Remove leading digit, 
	        // add trailing digit           
	        if ( i < N-M )
	        {
	            t = (d*(t - txt[i]*h) + txt[i+M])%prime;
	             
	            // We might get negative value of t, converting it to positive
	            if(t < 0) 
	              t = (t + prime); 
	        }
	    }
	}
	  
	
	// Driver program to test above function
	public static void main(String[] args)
	{
	   char[] txt = "GEEKS FOR GEEKS".toCharArray();
	   char[] pat = "GEEK".toCharArray();
	   int q = 101;  // A prime number
	   search(pat, txt);
	}
}
